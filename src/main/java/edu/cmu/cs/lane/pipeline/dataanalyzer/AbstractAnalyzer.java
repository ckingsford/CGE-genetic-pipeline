package edu.cmu.cs.lane.pipeline.dataanalyzer;

//import org.apache.commons.configuration.PropertiesConfiguration;

import java.util.ArrayList;

import edu.cmu.cs.lane.datatypes.dataset.SamplesDataset;
import edu.cmu.cs.lane.datatypes.dataset.SamplesDatasetList;
import edu.cmu.cs.lane.datatypes.dataset.SamplesGeneticData;
import edu.cmu.cs.lane.datatypes.dataset.SamplesLabels;
import edu.cmu.cs.lane.datatypes.evaluation.AbstractEvaluationFunction;
import edu.cmu.cs.lane.datatypes.evaluation.EvaluationResult;
import edu.cmu.cs.lane.datatypes.model.AnalysisDetails;
import edu.cmu.cs.lane.datatypes.model.CGEModel;
import edu.cmu.cs.lane.datatypes.prediction.CGEPrediction;
import edu.cmu.cs.lane.pipeline.datareader.filters.AbstractDataFilter;
import edu.cmu.cs.lane.settings.AbstractOptions;

/**
 * 
 * AbstractAnalyzer is the abstract base class for all analyzers (algorithms) which are applied to 
 * genetic and clinical data to build computational models that represents insights from the data. 
 * In order for to add a new algorithm functionality to CGE, the developer will need to create a class 
 * that inherits from AbstractAnalyzer. 
 * <p>
 * An Analyzer object encapsulates the functionality of the analyzer and is called by the rest of the 
 * CGE framework through multiple methods: 
 * <ul>
 * <li> {@link #getName()} is called when the analyzer class is registered in the system
 * <li> {@link #create(AbstractOptions)} is called when an new analyzer object is created
 * <li> {@link AbstractAnalyzer#loadLabels(AbstractOptions)} is called when the sample labels (e.g., clinical variables, disease state) are being loaded. 
 * This method is called once in each analysis cycle.
 * <li> {@link #loadData(AbstractOptions)} is called when the genetic data for all samples is being loaded. In case the defined input 
 * is a directory, this method is called per file in the directory. 
 * <li> {@link #analyze(AbstractOptions, SamplesLabels, SamplesGeneticData)} is called when the training algorithm is to be applied to the data. In case cross validation is 
 * defined, this method can be called for each iteration.
 * <li> {@link #applyModel(AbstractOptions, CGEModel, SamplesLabels, SamplesGeneticData)} is called when a model that was already generated by the training algorithm (in analyze(..)) 
 * needs to be applied to a new sample. It is common that this method will be called either when testing the model in 
 * during the cross validation procedure, or by the API services server that is called by the client when new data 
 * needs to be applied for a new sample.
 * <li> {@link #saveModel(AbstractOptions, CGEModel)} is called when the model that was generated needs to be stored (most likely to the database 
 * but possibly also to files. 
 * </ul>
 * 
 * @author zinman
 * @version 1.0
 * @since 1.0
 * 
 * @see ShotgunAnalyzer
 * @see GFLassoAnalyzer
 * 
 */
abstract public class AbstractAnalyzer {
    

    /**
     * Returns the name of the class to be registered in the CGEframework so that objects from this class
     * can be instantiated. The method is triggered  when the class is registered. Every plugin must provide a unique name
     * 
     * @return 						The unique name representing the relevant Analyzer 
     * 
     * @see DataAnalysisPhaseController
     * 
     */
	abstract public String getName();

	 /**
     * Instantiates an object from the relevant type. The method is triggered when an Analyzer object is created. 
     * The AbstractOptions object parameter is intended to pass additional parameters if necessary.
     * 
     * @return 						an instance to the new Analyzer object. 
     * 
     */
    abstract public AbstractAnalyzer create();
    
    public ArrayList<SamplesLabels> loadLabels(ArrayList<SamplesLabels> labels){
    	ArrayList<SamplesLabels> temp = loadLabelsOverride(labels);
    	if (temp !=null){
    		return temp;
    	}else{
    		return labels;
    	}
    }
    
    /**
     *  Loads the clinical variables or disease labels of the patients samples to be trained on. This method 
     *  is triggered when the CGE system loads the data based on the information in the properties file (including format and location of 
     *  the input - either database, folder location, or a single file). This method will be called only once per each analysis cycle. 
     *  Developers need to override this method only if they want to override or extend the CGE system default behavior. 
     *  (CGE provides auxiliary objects that can handle input in multiple formats and sources and convert it to
     *  a matrix format).
     * 
	 * To be used for override default load behavior. Return null to keep default
	 *
     * @param labels 
     * 
     * @param options				properties defined in the input properties file.
     * @return 						SamplesLabels object with the clinical variables/disease labels to be trained on in {@link #analyze(AbstractOptions, SamplesLabels, SamplesGeneticData)}
     */
    abstract public ArrayList<SamplesLabels> loadLabelsOverride(ArrayList<SamplesLabels> labels);
    
    public ArrayList<SamplesGeneticData> loadData(ArrayList<SamplesGeneticData> samplesGeneticData, ArrayList<AbstractDataFilter> filters){
    	ArrayList<SamplesGeneticData> temp = loadDataOverride(samplesGeneticData, filters);
    	if (temp !=null){
    		return temp;
    	}else{
    		return samplesGeneticData;
    	}
    }
    
     /**
     *  Loads the genetic data of the patients samples to be trained on. This method is triggered when the CGE 
     *  system loads the data based on the information in the properties file (including format and location of 
     *  the input - either database, folder location, or a single file). By default if the input data refers 
     *  to multiple chromosomes, this function will be triggered for each chromosome separately. Developers 
     *  need to override this method only if they want to override or extend the CGE system default behavior. 
     *  (CGE provides auxiliary objects that can handle input in multiple formats and sources and convert it to
     *  a matrix format).
     *  
     *  To be used for override default load behavior. Return null to keep default
     *  
     * @param samplesGeneticData 
     * @param filters 
     * 
     * @param options				properties defined in the input properties file.
     * @return 						SampleData object with the genetic data to be trained on in {@link #analyze(AbstractOptions, SamplesLabels, SamplesGeneticData)}
     */
    abstract public ArrayList<SamplesGeneticData> loadDataOverride(ArrayList<SamplesGeneticData> samplesGeneticData, ArrayList<AbstractDataFilter> filters);
    
    
    /**
     * returns a group of analyzers to be applied on the data
     */
    abstract public ArrayList<AbstractAnalyzer> initializeAnalyzers(SamplesDatasetList samplesDatasetList);
    
    
    /**
     *  Performs the training phase of the analyzer/algorithm. This method is triggered when the CGE system 
     *  starts to perform an analysis. By default if the input data refers to multiple chromosomes, this 
     *  function will be triggered for each chromosome separately. If cross-validation is defined this 
     *  function will be called for each iteration. The AbstractOptions object is intended to pass additional 
     *  parameters if necessary. 
     * 
     * @param options				properties defined in the input properties file.
     * @param labels				the clinical variables / disease labels for the training process. See {@link #loadLabels(AbstractOptions)} 
     * for more info.
     * @param samplesGeneticData				the genetic data information of the patients to be trained on
     * @param cvIndices 
     * @return 						{@link CGEModel} object with the model that was generated
     */
    abstract public CGEModel analyze(SamplesDatasetList samplesDatasetList);
    
    
    /**
     *  Applies a model generated at the training phase to a specific patient sample. This method is triggered 
     *  during the testing phase of the backend analysis or by a client side call to evaluate a {@link CGEModel} for a 
     *  specific sample. 
     * 
     * @param options				properties defined in the input properties file.
     * @param model					the model to validate the patient against.
     * @param labels					clinical or other information attached to the sample to be test (if needed)
     * @param samplesGeneticData				the genetic data information of the specific sample
     * @return 						{@link CGEPrediction} object with the result
     */
    abstract public ArrayList<CGEPrediction> applyModel(CGEModel model, SamplesDataset samplesDataset);
    

	/**
	 * @param model
	 * @param labels
	 * @param samples
	 * @param cvIndices
	 * @return This method returns possible evaluations based on evaluation metric input and the analyzer type
	 */
	abstract public ArrayList<EvaluationResult> testModel(CGEModel model, SamplesDatasetList samplesDatasetList, ArrayList<AbstractEvaluationFunction>evaluateFunctions);

	/**
	 * @param labels 
	 * @return additional info
	 */
	public String getAnalysisPrototypeInfo(ArrayList<SamplesLabels> labels){
		return null;
	}

}
