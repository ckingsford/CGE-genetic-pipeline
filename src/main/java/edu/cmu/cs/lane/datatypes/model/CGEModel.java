package edu.cmu.cs.lane.datatypes.model;

import java.util.ArrayList;
import java.util.Hashtable;

/**
 * 
 * CGEModel represents a model generated by an Analyzer that contains coefficient information for every non-zero coefficient for each genetic (or other) feature. 
 * In the case that multiple clinical variables are present, each vector will represent the information 
 * for one clinical variable. 
 * 
 * @author zinman
 * @version 1.0
 * @since 1.0
 * 
 */
public class CGEModel {

	
	/**
	 * An id for this model  
	 */
	public AnalysisDetails details;
	
	/**
	 * represents an outcome model as an array of coefficients.
	 */
	protected Hashtable<String, ArrayList<Integer>> modelHash;
	protected ArrayList<CGEModelFeatureBean> model;

	/**
	 * @return the details
	 */
	public AnalysisDetails getDetails() {
		return details;
	}

	/**
	 * @param details the details to set
	 */
	public void setDetails(AnalysisDetails details) {
		this.details = details;
	}

	/**
	 * Default constructor. Initializes the array of coefficients.
	 */
	public CGEModel (){
		model = new ArrayList<CGEModelFeatureBean>();
		modelHash = new Hashtable<String,ArrayList<Integer>>();
		details = new AnalysisDetails();
	}
	
	/**
	 * Adds a new coefficient results to the model
	 * @param featureBean						 feature to be added
	 */
	public void add(CGEModelFeatureBean featureBean){
		if (!modelHash.containsKey(featureBean.id)){
			modelHash.put(featureBean.id, new ArrayList<Integer>());
		}		
		modelHash.get(featureBean.id).add(model.size());
		model.add(featureBean);
	}
	
	/**
	 * 
	 * @return model size
	 */
	public int size(){
		return model.size();
	}
	
	/**
	 * 
	 * @param featureId
	 * @param variableId
	 * @return a fet
	 */
	public CGEModelFeatureBean get(String featureId, String variableId){
		if (!modelHash.containsKey(featureId)) return null;
		CGEModelFeatureBean feature = null;
		for (int i : modelHash.get(featureId)){
			if (model.get(i).var.equals(variableId)){
				feature=model.get(i); //adding all the feature elements corresponding to this id
				break;
			}
		}
		return feature;
	}
	
	/**
	 * @param featureId
	 * @return return all model features corresponding to a specific featureId
	 */
	public ArrayList<CGEModelFeatureBean> get(String featureId){
		if (!modelHash.containsKey(featureId)) return null;
		ArrayList<CGEModelFeatureBean> features = new ArrayList<CGEModelFeatureBean>();
		for (int i : modelHash.get(featureId)){
			features.add(model.get(i)); //adding all the feature elements corresponding to this id
		}
		return features;
	}
	
	/**
	 * 
	 * @param id
	 * @return true if there is a feature corresponding to this ID
	 */
	
	public boolean hasFeature(String id){
		return modelHash.containsKey(id);
	}
	
	public ArrayList<CGEModelFeatureBean> getFeatures(){
		return model;
	}
}
